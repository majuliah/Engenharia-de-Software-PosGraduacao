# 05 - Introdução a POO

#### Conceitos: Programação orientada a objetos não possui uma estrutura sequencial apenas. Ela utiliza métodos para executar os fluxos de programa. 

### Exemplo:

```java
public class Carro {
      String marca;
      String modelo;
      String cor;
      int ano;
      int velocidade;
      boolean status;
}
```


## 02 - Classes

#### Uma classe define e diz como será um objeto. A partir dela podemos gerar um objeto.

### Exemplo:

```java
class Carro{
  String marca;
  String modelo;
  String cor;
  int ano;
  int velocidade;
  boolean status;
}

class Main {
  public static void main(String[] args) {
    Cao pingo = new Cao();
    pingo.nome = "Pingo";
    pingo.idade = 2;
    pingo.raca = "Chincherr";

    pingo.Anda();
 }
}
```

## 03 - Construtores e sobrecarga

#### construtores são métodos que inicializam valores de objetos quando instanciados.

### Exemplo:

```java
public class Cao {
  public String nome;
  public String raca;
  public String cor;
  public int idade;
  public double peso;

  public Cao() {
    cor = "Caramelo";
  }

  public Cao(String nome, String raca, int idade){
    this.nome = nome;
    this.raca = raca;
    this.idade = idade;
  }

  public void Anda() {
    System.out.println("Estou andando...");
  }

  public void DadosCao(){
    System.out.println("Nome: " + nome);
    System.out.println("Nome: " + idade);
  }
}
```

```java
class Main {
  public static void main(String[] args) {
    Cao pingo = new Cao();
    pingo.nome = "Pingo";
    pingo.idade = 2;
    pingo.raca = "Chincherr";

    pingo.Anda();

    Cao outro = new Cao("Caju", "Pitbull", 3);
    outro.DadosCao();
  }
}
```



## 04 - Modificadores de acesso

#### Define como os métodos e atributos são visualizados e acessados dentro do projeto. Private por exemplo, só pode ser acessados dentro de uma mesma classe e protected dentro de um mesmo pacote. 

### Exemplo:

```java
  private void Anda() {
    System.out.println("Estou andando...");
  }

  private void DadosCao() {
    System.out.println("Nome: " + nome);
    System.out.println("Nome: " + idade);
  }
```



## 05 - Encapsulamento

#### Funcionalidades ocultas, protegidas para que não sejam acessadas informações sensíveis, mantendo a integridade e segurança de um trecho de código. Usam acessores para manipular membros protegidos.

### Exemplo:

```java
public class Aluno {
  private Strig nome;

  public void setNome(String nome) {
    this.nome = nome;
  }
   public void getNome() {
    return nome;
  }
}
```

  

## 06 -  Métodos

#### Os métodos são ações que um método desempenha em seu tempo de vida. 

### Exemplo:

```java
public class Cao {
  public String nome;
  private int idade;

  public Cao(int idade) {
    this.idade = idade;
  }

  public void setIdade(int idade) {
    this.idade = idade;
  }

  public int getIdade() {
    return idade;
  }

  public boolean VerificaIdade() {
    if (idade > 10) {
      return true;
    }
    return false;
  }
}
```

```java
class Main {
  public static void main(String[] args) {
    Cao pingo = new Cao();
    pingo.setIdade(6);

    if (pingo.VerificarIdade()) {
      System.out.println("Ele é idoso");
    } else {
      System.out.println("Ele é novo");
    }
  }
}
```

